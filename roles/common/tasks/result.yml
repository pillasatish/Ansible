- name: Use _nodename from post main.yml
  set_fact:
    nodenames: "{{ hostname }}"
    params: "{{ tasks_params }}"

# - name: Remove null values from params
#   set_fact:
#     params: "{{ params | default({}) | combine({'scope': (params.scope if params.scope != 'all' else None), 'version': (params.version if params.version != 'latest' else None)}) | dict2items | rejectattr('value', 'equalto', None) | list | items2dict }}"
#   when: params is defined and (params.version is defined or params.scope is defined or params.scope == 'all' or params.version == 'latest')


# - name: Remove null values from params
#   set_fact:
#     params: "{{ params | default({}) | dict2items | rejectattr('value', 'equalto', None) | list | items2dict }}"
#   when: params is defined and (params.version is defined or params.scope is defined)

# - name: Remove null values from params
#   set_fact:
#     params: "{{ params | default({}) | combine({'scope': (params.scope if (params.scope != 'all') else None), 'version': (params.version if (params.version != 'latest') else None)}) | dict2items | rejectattr('value', 'equalto', None) | list | items2dict }}"
#   when: params is defined and (params.version is defined or params.scope is defined)

- name: Remove null values from params
  set_fact:
    params: "{{ params | default({}) | combine({'version': (params.version if (params.version != 'latest') else None)}) | dict2items | rejectattr('value', 'equalto', None) | list | items2dict }}"
  when: params is defined and (params.version is defined)

- name: Print _nodename
  debug:
    var: nodenames,params

- name: Match version number with regular expression
  shell: |
    python -c "import re
    regex = '^[1-9]\d+\.\d+$'
    match = re.match(regex, str(version))
    if match:
      print('The string matches the regular expression.')
    else:
      print('The string does not match the regular expression.')"