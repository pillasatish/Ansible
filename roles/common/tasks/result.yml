- name: Use _nodename from post main.yml
  set_fact:
    nodenames: "{{ hostname }}"
    params: "{{ tasks_params }}"

# - name: Remove null values from params
#   set_fact:
#     params: "{{ params | default({}) | combine({'scope': (params.scope if params.scope != 'all' else None), 'version': (params.version if params.version != 'latest' else None)}) | dict2items | rejectattr('value', 'equalto', None) | list | items2dict }}"
#   when: params is defined and (params.version is defined or params.scope is defined or params.scope == 'all' or params.version == 'latest')


# - name: Remove null values from params
#   set_fact:
#     params: "{{ params | default({}) | dict2items | rejectattr('value', 'equalto', None) | list | items2dict }}"
#   when: params is defined and (params.version is defined or params.scope is defined)

# - name: Remove null values from params
#   set_fact:
#     params: "{{ params | default({}) | combine({'scope': (params.scope if (params.scope != 'all') else None), 'version': (params.version if (params.version != 'latest') else None)}) | dict2items | rejectattr('value', 'equalto', None) | list | items2dict }}"
#   when: params is defined and (params.version is defined or params.scope is defined)

- name: Remove null values from params
  set_fact:
    params: "{{ params | default({}) | combine({'version': (params.version if (params.version != 'latest') else None)}) | dict2items | rejectattr('value', 'equalto', None) | list | items2dict }}"
  when: params is defined and (params.version is defined)

- name: Print _nodename
  debug:
    var: nodenames,params

- name: Check Version Pattern
  set_fact:
    version_to_check: "{{ version }}"  # Replace 'version_variable' with the actual variable name you use for the version
  
- debug:
    var: version_to_check 

- name: Verify version format
  assert:
    that: "version_to_check is match('^[1-9]\\d+\\.\\d+$')"
    fail_msg: "Version '{{ version_to_check }}' does not match the required format: 'x.y'"
  vars:
    ansible_skip_tags: always

- name: Read JSON file
  slurp:
    src: file.json
  register: json_content

- name: Load JSON content
  set_fact:
    version_pattern: "{{ (json_content.content | b64decode | from_json).parameters.version.type }}"

# - name: Convert version_pattern to Ansible regex format
#   set_fact:
#     version_pattern_ansible: "{{ version_pattern | regex_replace('^pattern\\[/|\\]$', '') | regex_replace('\\\\', '') }}"

- debug:
    var: version_pattern  

- name: Verify version formatat
  assert:
    that: "version is match(version_pattern)"
    fail_msg: " '{{ version }}' does not match the required format: '{{ version_pattern }}'"
  vars:
    ansible_skip_tags: always
